"""Package is used as a simulated UOSInteface for test purposes."""
from typing import Tuple

from uosinterface.hardware.config import UOS_SCHEMA
from uosinterface.hardware.uosabstractions import COMresult
from uosinterface.hardware.uosabstractions import SystemDevice
from uosinterface.hardware.uosabstractions import UOSInterface


class NPCStub(UOSInterface):
    """Class can be used as a low level test endpoint."""

    def __init__(self):
        """Instantiate an instance of the test stub."""
        self.__packet_buffer = []
        self.__open = False

    def execute_instruction(self, address: int, payload: Tuple[int, ...]) -> COMresult:
        """
        Simulates executing an instruction on a UOS endpoint.

        Should check weather the last instruction was valid and store
        it. This will allow read response to provide more realistic
        responses.

        """
        for function in UOS_SCHEMA:
            for vol in UOS_SCHEMA[function].address_lut:
                if UOS_SCHEMA[function].address_lut[vol] == address:
                    if UOS_SCHEMA[function].ack:
                        self.__packet_buffer.append(
                            self.get_npc_packet(0, address, tuple([0]))
                        )
                    for rx_packet in UOS_SCHEMA[function].rx_packets_expected:
                        self.__packet_buffer.append(
                            self.get_npc_packet(
                                0, address, tuple([0 for _ in range(rx_packet)])
                            )
                        )
        return COMresult(True)

    def read_response(self, expect_packets: int, timeout_s: float) -> COMresult:
        """
        Simulates gathering the response from an instruction.

        Should have already executed an instruction. If no response is
        generated by instruction will error accordingly.

        """
        result = COMresult(False)
        if len(self.__packet_buffer) > 0:
            result.ack_packet = self.__packet_buffer.pop(0)
            result.status = True
        for packet in self.__packet_buffer:
            result.rx_packets.append(packet)
        return result

    def hard_reset(self) -> COMresult:
        """Over-riding base prototype, simulates reset."""
        return COMresult(status=True)

    def open(self) -> bool:
        """Over-riding base prototype, simulates opening a connection."""
        self.__open = True
        return True

    def close(self) -> bool:
        """Over-riding base prototype, simulates close a connection."""
        self.__open = False
        return True

    @staticmethod
    def enumerate_devices():
        """Returns a list of test stubs implemented in the interface."""
        return [
            SystemDevice(
                connection="STUB|Test stub", interface="STUB", port="Test stub"
            )
        ]
